-we first initialize the git under our project's folder.
-then we should run git init command.
-the git status shows that empty repo.
-now create a new file with name story.txt and then check status.
-it shows this:
	On branch master

		No commits yet

		Untracked files:
		  (use "git add <file>..." to include in what will be committed)
			.~lock.EE logs.csv#
			Devops Pre-requisite Course/
			Kubernetes Book.pdf
			Linux: Bootcamp.pdf

		nothing added to commit but untracked files present (use "git add" to track)

- Next, you need to run git add command to add your whole project into staging.
	git add ./*
	or
	git add <filename>
- Now when you run git status it shows this:
	
	On branch master

	No commits yet

	Changes to be committed:
	  (use "git rm --cached <file>..." to unstage)
		new file:   Devops Pre-requisite Course/Application deployment mechanism and basics (kodekloud)
		new file:   Devops Pre-requisite Course/Course Material/Introduction/Additional-Resources.pdf
		new file:   Devops Pre-requisite Course/Course Material/Introduction/DevOps-Pre-Requisites-v2.pdf
		new file:   Devops Pre-requisite Course/Database basics
		new file:   Devops Pre-requisite Course/Deployments with webservers
		new file:   Devops Pre-requisite Course/SSL & TLS basics
		new file:   Devops Pre-requisite Course/git basics
		new file:   Devops Pre-requisite Course/sample app deployment
		new file:   Git for Beginners/git init lecture
		new file:   Kubernetes Book.pdf
		new file:   Linux: Bootcamp.pdf

- Now we can simply use the git commit -m "my first commit" command to associate the commit.

- If you modified any of these file accidentaly and wish to restore the previous version of file use:
	git restore <filename>

- If you delete the file that was staged and you wish to restore it, you can use git restore command. But if you want to 
delete the commits and/or staged status from git repo, use:
		git rm <filename>
		this will permanently delete the file commits and staged status from git.
- If we create a new file and also modified the existing file, so git status would be to untracked newly added file and 
modified shows for edited file. Such as:

		On branch master
		Changes not staged for commit:
		  (use "git add <file>..." to update what will be committed)
		  (use "git restore <file>..." to discard changes in working directory)
			modified:   Git for Beginners/git init lecture

		Untracked files:
		  (use "git add <file>..." to include in what will be committed)
			Git for Beginners/test.html

		no changes added to commit (use "git add" and/or "git commit -a")
- you can now add both of the files into staged using:
	git add .
	then add commits:
	git commit -m "newly added files"
	
	
- NOTE:
=========
	All commits must be atomic. 
	Means if owais and namrah works on same app and owais fixed the front-end button navigation.
	then owais should push it as one seperate commit. This is best practice.
	
	However, if owais fix JS and commit this and fix CSS and html for button navigation and commit another change, 
	then it's bad practice. because ideally it must lie under one commit as it relates with one problem.
	
	If namrah fix a bug and add front-end page then add a single commit, it is also bad practice because front page 
	and bug fix is not corelate with each other and does not defined explicitly.

- If you want to unstage any file from staging area simply use:
	git restore --staged <filename> 
	
- If you want that your personal ideas and notes should not be pushed to git, you can simply add the .gitignore folder under the place where your personal notes are present. Lets say my notes are under git/notes.txt. So, I will do this:
				cd git ; echo "notes.txt" >> .gitignore
			
- Now run the git status and you'll not see untracked file of notes.txt that you just created or modified, you might mistakenly run the git add . command which will move all modified and newly created files into staging area. We use gitignore to avoid this.


